from aiogram import Bot, Dispatcher
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message
import asyncio
from database import Database
import re

CHANNEL_USERNAME = "example"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


MAX_TRACKS = 3
hiWord = "" 

db = Database()

def get_track_word_form(count):
    if count == 1:
        return "—Ç—Ä–µ–∫"
    elif 2 <= count <= 4:
        return "—Ç—Ä–µ–∫–∞"
    else:
        return "—Ç—Ä–µ–∫–æ–≤"

def get_track_word_form_r(count):
    if count == 1:
        hiWord = "–µ—â–µ"
        return hiWord, "—Ç—Ä–µ–∫"
    else:
        hiWord = "–¥–æ"
        return hiWord, "—Ç—Ä–µ–∫–æ–≤"

def extract_track_id(url):
    match = re.search(r'/track/(\d+)', url)
    if match:
        return match.group(1)
    return None

async def check_subscription(user_id):
    try:
        chat_member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except Exception as e:
        #print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
        
@dp.message(Command("start"))
async def start_command(message: Message):
        
    is_subscribed = await check_subscription(message.from_user.id)
    print(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {message.from_user.id}: {is_subscribed}")
    
    if not is_subscribed:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")]
            ]
        )
        await message.answer(
            f"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard
        )
        return
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
    user = db.get_user(message.from_user.id)

    if not user:
        user = db.add_user(message.from_user.id, message.from_user.username)
        remaining_tracks = MAX_TRACKS
    else:
        track_count = user["track_count"]
        remaining_tracks = MAX_TRACKS - track_count
    hiWord, track_word = get_track_word_form_r(remaining_tracks)
    image_path = "./ppg1.jpeg"
    photo = FSInputFile(image_path)
 
    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!"
                     "\n\nüéß –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º—É–∑—ã–∫—É –¥–ª—è –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. "
                    f"\n\n–ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–∫:"

                    f"\n1. –û—Ç–∫—Ä–æ–π—Ç–µ *–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É* –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π —Ç—Ä–µ–∫. "
                     f"\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü–æ–¥–µ–ª–∏—Ç—å—Å—è* (—Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–∫–∞). "
                        f"\n3. *–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É* –Ω–∞ —Ç—Ä–µ–∫. "
                        f"\n4. *–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É* –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ —á–∞—Ç. "
                        f"\n\nüí° –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ 3 —Ç—Ä–µ–∫–æ–≤. "
                        f"\n\nüéâ –¢—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±–µ—Ä—ë—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å—Ç–∞–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!"
                     #f"\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å *{hiWord} {remaining_tracks} {track_word}*. "
         ), parse_mode="Markdown")
    
    #await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! "
    #                     f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {hiWord} {remaining_tracks} {track_word}. "
     #                    f"–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É.")
    
@dp.message(Command("stats"))
async def stats_command(message: Message):
    ADMIN_IDS = [00,00,00] 

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    stats = db.get_most_frequent_tracks()
    if not stats:
        await message.answer("–¢—Ä–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n"
    response += "\n".join(
    [f"https://music.yandex.ru/track/{track[0]} ‚Äî {track[1]} —Ä–∞–∑(–∞)" for track in stats])
    await message.answer(response)
    
    
@dp.message(Command("stats_all"))
async def stats_command(message: Message):
    ADMIN_IDS = [00,00,00] 

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    stats = db.get_most_frequent_tracks_all()
    if not stats:
        await message.answer("–¢—Ä–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ):\n"
    response += "\n".join(
    [f"https://music.yandex.ru/track/{track[0]} ‚Äî {track[1]} —Ä–∞–∑(–∞)" for track in stats])
    await message.answer(response)

@dp.message(Command("reset"))
async def reset_tracks(message: Message):
    ADMIN_IDS = [00,00,00] 

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    db.deactivate_all_tracks()

    db.reset_user_track_count()

    await message.answer("–í—Å–µ —Ç—Ä–µ–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")
    
@dp.message()
async def handle_track(message: Message):
    is_subscribed = await check_subscription(message.from_user.id)
    
    if not is_subscribed:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")]
            ]
        )
        await message.answer(
            f"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard
        )
        return
    
    yandex_music_pattern = r"https?://music\.yandex\.(ru|com)/.+"
    track_url = message.text.strip()
    if not re.match(yandex_music_pattern, track_url):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞.")
        return
    
    if "/track" in message.text:
        user_id = message.from_user.id
        track_url = extract_track_id(track_url)
        user = db.get_user(user_id)

        if not user: 
            user = db.add_user(user_id, message.from_user.username)
            track_count = 0
        else:
            track_count = user["track_count"]
            
        remaining_tracks = MAX_TRACKS - track_count

        if remaining_tracks <= 0:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤. –°–ø–∞—Å–∏–±–æ!")
            return
        
        if db.is_track_already_sent(user["telegram_id"], track_url):
            await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫!")
            return
        
        db.add_track(user["telegram_id"], track_url)
        remaining_tracks -= 1
        #print(remaining_tracks)
        track_word = get_track_word_form(remaining_tracks)  
        response = (f"–°–ø–∞—Å–∏–±–æ! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ {remaining_tracks} {track_word}."
                    if remaining_tracks > 0 else "–°–ø–∞—Å–∏–±–æ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞.")
        await message.answer(response)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
